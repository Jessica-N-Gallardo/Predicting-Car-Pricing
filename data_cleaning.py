# -*- coding: utf-8 -*-
"""Data Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bb-_1MPBlkQv4XpuR7dL32GQnhtbFBrW

# Imports
"""

!pip install itables

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from itables import init_notebook_mode
init_notebook_mode(all_interactive=True)

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Spring 2025/Data Science/Projects/Project 3: Car Prices Data/Data/new_used_cars_data (1).csv')

df.head()

"""# Data Cleaning

## Basics
"""

df.head()

df.shape

#Just in case: lowercase and strip everything of whitespace and replace with underscores
df.columns = df.columns.str.strip().str.lower().str.replace(r"\s+", "_", regex=True)
df.columns

#drop any duplicates
df.drop_duplicates(inplace=True)

"""## Dealing with NAs"""

#check missing NAs as percentages
(df.isna().sum() / len(df) *100).sort_values(ascending = False)

"""Drop Useless Columns & Columns that only have NA's"""

#drop actually useless columns
df.drop(columns =['description', 'main_picture_url' ], inplace = True)

df.head()

df.columns

#drop columns that that have a high missing NAs %
df.drop(columns = [ 'seller_rating', 'listed_date','is_new', 'city', 'longitude', 'engine_cylinders',
                   'transmission_display', 'wheel_system', 'franchise_make', 'city_fuel_economy', 'trim_name', 'exterior_color', 'trimid'], inplace = True)
df.head()



"""## Fix Data Types"""

df.shape

df.head()

#check data types
df.dtypes

"""**Start fixing datatypes & removing unnecessary items in measurement columns**

### Clean "objects" Columns - Convert to Floats

back_legroom column
"""

df['back_legroom'].unique()

#count how many "--" are in the back_legroom column
(df['back_legroom'] == '--').value_counts()

#coerce python to convert "--" to NA
df['back_legroom'] = df['back_legroom'].replace('--', np.nan)

#remove 'in' from back_legroom column
df['back_legroom'] = df['back_legroom'].str.replace('in', '').astype(float)

#was changing it to NA a good idea?
df['back_legroom'].isna().sum()

#sanity check
df.head() #all good

"""front_legroom column"""

df['front_legroom'].unique()

#same issue, we have '--' as a value
#coerce python to convert "--" to NA
df['front_legroom'] = df['front_legroom'].replace('--', np.nan)

#remove 'in' from front_legroom column
df['front_legroom'] = df['front_legroom'].str.replace('in', '').astype(float)

#sanity check
df.head()

"""fuel_tank_volume"""

df['fuel_tank_volume'].unique()

#same issue, we have '--' as a value
# Convert '--' to NaN and remove 'in' before converting to float
df['fuel_tank_volume'] = df['fuel_tank_volume'].replace('--', np.nan)
df['fuel_tank_volume'] = df['fuel_tank_volume'].str.replace('gal','').astype(float)

"""columns using inches"""

in_cols = ['wheelbase', 'length', 'width', 'height']

#same issue, we have '--' as a value
#coerce python to convert "--" to NA
df[in_cols] = df[in_cols].replace('--', np.nan)
df[in_cols] = df[in_cols].apply(lambda x: x.str.replace('in', '', regex=True).astype(float))

#sanity check
df.head()

"""maximum_seating column = come back to this"""

df['maximum_seating'].unique()

df[df['maximum_seating'] == '--']

#same issue, we have '--' as a value
# Convert '--' to NaN and remove 'in' before converting to float
df['maximum_seating'] = df['maximum_seating'].replace('--', np.nan)
df['maximum_seating'] = df['maximum_seating'].str.replace('seats','').astype(float)

df.head(20)

"""## Additional Cleaning

### Create new column from major_option column

major_option column
"""

df['major_options']

df['major_options'].isna().sum()

#count the total of items or "options"
#in the df['major_options'] to create new column
df['option_count'] = df['major_options'].str.count(",") + 1

df.head(20)

"""### Survey of data"""

df.head(20)

#check NA's again
#check missing NAs as percentages
(df.isna().sum() / len(df) *100).sort_values(ascending = False)

#check NA totals per column
#df.isna().sum().sort_values(ascending = False)

df.shape

#check NA's again!!
#check missing NAs as percentages
(df.isna().sum() / len(df) *100).sort_values(ascending = False)

#check NA totals per column
df.isna().sum().sort_values(ascending = False)

len(df)

#double-check the columns we have left
df.columns #back_legroom , latitude , year - remove

#drop columns that that have a high missing NAs %
df.drop(columns = [ 'highway_fuel_economy', 'back_legroom','latitude', 'torque', 'power', 'major_options'], inplace = True)
df.head()

df.head()

df[['years_old', 'owner_count']]

#imputate owner_count column's NA's with 0
# Impute 'owner_count' with 0 only when 'years_old' is 0 and 'owner_count' is NaN
df.loc[(df['years_old'] == 0) & (df['owner_count'].isna()), 'owner_count'] = 0

df[['years_old', 'owner_count']]

df.isna().sum().sort_values(ascending = False)

#drop NA's for owner_count
df = df.dropna(subset = ['owner_count'])

#Check again
df.isna().sum().sort_values(ascending = False)

#Check the NA's only for these columns - That still have NA's
df[df[['option_count', 'engine_type', 'fuel_type', 'front_legroom', 'transmission',
       'fuel_tank_volume', 'engine_displacement', 'horsepower', 'maximum_seating',
       'width', 'height', 'wheelbase', 'length']].isna().any(axis=1)]

df[df.isna().any(axis=1)]

"""Individually Imputating and Filling in missing info. via google

### Create New Columns: Depreciation
"""

#create a new column savings_amount + price = original price

df['original_price'] = df['price'] + df['savings_amount']

#calculate depreciation
df['yearly_depreciation'] = df['savings_amount'] / df['years_old']

#calculating depreciation value per mile
df['depreciation_per_mile'] = df['yearly_depreciation']/ df['mileage']

df.head()

df.columns

df.shape

#Calculate the yearly depreciation value
df.loc[(df['savings_amount'] == 0) & (df['years_old'] == 0), 'yearly_depreciation'] = 0
df.loc[(df['savings_amount'] != 0) & (df['years_old'] != 0), 'yearly_depreciation'] = df['savings_amount'] / df['years_old']

df.head(10)

df.loc[(df['savings_amount'] == 0) | (df['mileage'] == 0), 'depreciation_per_mile'] = 0
df.loc[(df['savings_amount'] != 0) | (df['mileage'] != 0), 'depreciation_per_mile'] = df['savings_amount'] / df['mileage']

df.dropna(inplace= True)

df.shape

df.isna().sum()

#Download as new CSV.
df.to_csv('/content/drive/My Drive/Final_Data.csv', index=False)